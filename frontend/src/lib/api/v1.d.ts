/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/controllers/v1/invite/redeem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redeem
         * @description Allows for redeeming a invitation code
         */
        post: operations["ApiControllersV1InviteRedeemRedeem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/controllers/v1/invite/{id_}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find
         * @description Find an invite
         */
        get: operations["ApiControllersV1InviteIdFind"];
        /**
         * Modify
         * @description Modify an invite
         */
        put: operations["ApiControllersV1InviteIdModify"];
        post?: never;
        /**
         * Delete
         * @description Deletes an invite
         */
        delete: operations["ApiControllersV1InviteIdDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/controllers/v1/invite/{id_}/password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Reset
         * @description Resets the password for an invite
         */
        delete: operations["ApiControllersV1InviteIdPasswordResetReset"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/controllers/v1/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create
         * @description Create an invite
         */
        post: operations["ApiControllersV1InviteCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/controllers/v1/invite/page:int": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List
         * @description List 100 invites at a time
         */
        get: operations["ApiControllersV1InvitePageIntList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/controllers/v1/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Public
         * @description Gets basic information for Inviterr, what's publicly available
         */
        get: operations["ApiControllersV1SetupPublic"];
        put?: never;
        /**
         * Setup
         * @description Setups the basic information for Inviterr, can only be called once.
         */
        post: operations["ApiControllersV1SetupSetup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/controllers/v1/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * InvalidateSession
         * @description Invalidates a given session
         */
        delete: operations["ApiControllersV1SessionsSessionIdInvalidateSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/controllers/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sessions
         * @description Lists all active sessions for myself
         */
        get: operations["ApiControllersV1SessionsSessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BasicSetupCompletedModel */
        BasicSetupCompletedModel: {
            site_title: string;
            theme: "catppuccin" | "cerberus" | "concord" | "crimson" | "fennec" | "hamlindigo" | "legacy" | "mint" | "modern" | "mona" | "nosh" | "nouveau" | "pine" | "reign" | "rocket" | "rose" | "sahara" | "seafoam" | "terminus" | "vintage" | "vox" | "wintry";
            completed: boolean;
        };
        /** BasicSetupCreateModel */
        BasicSetupCreateModel: {
            site_title: string;
            theme: "catppuccin" | "cerberus" | "concord" | "crimson" | "fennec" | "hamlindigo" | "legacy" | "mint" | "modern" | "mona" | "nosh" | "nouveau" | "pine" | "reign" | "rocket" | "rose" | "sahara" | "seafoam" | "terminus" | "vintage" | "vox" | "wintry";
            email: string;
            password: string;
        };
        /** CreateInviteModel */
        CreateInviteModel: {
            /** @default [] */
            jellyfin: components["schemas"]["InviteJellyfinModel"][];
            /** @default [] */
            plex: components["schemas"]["InvitePlexModel"][];
            /** @default [] */
            emby: components["schemas"]["InviteEmbyModel"][];
            /**
             * @description Any special permissions said user should be given
             * @default []
             */
            roles: string[];
            /**
             * @description How many times can a invite code be redeemed
             * @default 1
             */
            uses: number;
            /** @description Optional datetime to stop accepting code */
            expires?: string | null;
            /** @default [] */
            onboarding: components["schemas"]["OnboardTemplateOrderModel"][];
        };
        /** CreatedInviteModel */
        CreatedInviteModel: {
            /** @default [] */
            jellyfin: components["schemas"]["InviteJellyfinModel"][];
            /** @default [] */
            plex: components["schemas"]["InvitePlexModel"][];
            /** @default [] */
            emby: components["schemas"]["InviteEmbyModel"][];
            /**
             * @description Any special permissions said user should be given
             * @default []
             */
            roles: string[];
            /**
             * @description How many times can a invite code be redeemed
             * @default 1
             */
            uses: number;
            /** @description Optional datetime to stop accepting code */
            expires?: string | null;
            /** @default [] */
            onboarding: components["schemas"]["OnboardTemplateOrderModel"][];
            /** @description ID of the invitation code */
            id: string;
            /** @description Raw invitation password */
            password: string;
            /** @description User ID who created the invite */
            user_id: string;
        };
        /** InviteEmbyModel */
        InviteEmbyModel: {
            /** @description Inviterr's internal ID of the server */
            platform_internal_id: string;
            /** @description A list of folders enabled for the user, if None all folders will be provided. */
            folders?: string[] | null;
            /**
             * @description Max allow sessions for user, if 0 is unlimited. For Plex this must be implemented with an external system.
             * @default 0
             */
            sessions: number;
            permissions: components["schemas"]["InviteEmbyPermissions"];
            /**
             * @default emby
             * @constant
             */
            type: "emby";
        };
        /** InviteEmbyPermissions */
        InviteEmbyPermissions: {
            /** @description Indicates if the user is an administrator. */
            IsAdministrator?: boolean | null;
            /** @description Indicates if the user is hidden. */
            IsHidden?: boolean | null;
            /** @description Indicates if the user is hidden remotely. */
            IsHiddenRemotely?: boolean | null;
            /** @description Indicates if the user is disabled. */
            IsDisabled?: boolean | null;
            /** @description The maximum parental rating allowed. */
            MaxParentalRating?: number | null;
            /** @description A list of blocked tags. */
            BlockedTags?: string[] | null;
            /** @description Indicates if user preference access is enabled. */
            EnableUserPreferenceAccess?: boolean | null;
            /** @description A list of unrated items blocked, such as Movie, Trailer, Series, etc. */
            BlockUnratedItems?: string[] | null;
            /** @description Allows remote control of other users. */
            EnableRemoteControlOfOtherUsers?: boolean | null;
            /** @description Allows shared device control. */
            EnableSharedDeviceControl?: boolean | null;
            /** @description Indicates if remote access is enabled. */
            EnableRemoteAccess?: boolean | null;
            /** @description Allows management of live TV. */
            EnableLiveTvManagement?: boolean | null;
            /** @description Allows access to live TV. */
            EnableLiveTvAccess?: boolean | null;
            /** @description Indicates if media playback is enabled. */
            EnableMediaPlayback?: boolean | null;
            /** @description Allows audio playback transcoding. */
            EnableAudioPlaybackTranscoding?: boolean | null;
            /** @description Allows video playback transcoding. */
            EnableVideoPlaybackTranscoding?: boolean | null;
            /** @description Allows playback remuxing. */
            EnablePlaybackRemuxing?: boolean | null;
            /** @description Allows content deletion. */
            EnableContentDeletion?: boolean | null;
            /** @description List of folders from which content deletion is allowed. */
            EnableContentDeletionFromFolders?: string[] | null;
            /** @description Indicates if content downloading is enabled. */
            EnableContentDownloading?: boolean | null;
            /** @description Allows subtitle downloading. */
            EnableSubtitleDownloading?: boolean | null;
            /** @description Allows subtitle management. */
            EnableSubtitleManagement?: boolean | null;
            /** @description Allows sync transcoding. */
            EnableSyncTranscoding?: boolean | null;
            /** @description Allows media conversion. */
            EnableMediaConversion?: boolean | null;
            /** @description List of enabled devices. */
            EnabledDevices?: string[] | null;
            /** @description Indicates if all devices are enabled. */
            EnableAllDevices?: boolean | null;
            /** @description List of enabled channels. */
            EnabledChannels?: string[] | null;
            /** @description Indicates if all channels are enabled. */
            EnableAllChannels?: boolean | null;
            /** @description The count of invalid login attempts. */
            InvalidLoginAttemptCount?: number | null;
            /** @description Allows public sharing. */
            EnablePublicSharing?: boolean | null;
            /** @description List of blocked media folders. */
            BlockedMediaFolders?: string[] | null;
            /** @description List of blocked channels. */
            BlockedChannels?: string[] | null;
            /** @description Bitrate limit for remote clients. */
            RemoteClientBitrateLimit?: number | null;
            /** @description List of excluded subfolders. */
            ExcludedSubFolders?: string[] | null;
            /** @description Indicates if premium features are disabled. */
            DisablePremiumFeatures?: boolean | null;
        };
        /** InviteJellyfinModel */
        InviteJellyfinModel: {
            /** @description Inviterr's internal ID of the server */
            platform_internal_id: string;
            /** @description A list of folders enabled for the user, if None all folders will be provided. */
            folders?: string[] | null;
            /**
             * @description Max allow sessions for user, if 0 is unlimited. For Plex this must be implemented with an external system.
             * @default 0
             */
            sessions: number;
            permissions: components["schemas"]["InviteJellyfinPermissions"];
            /**
             * @default jellyfin
             * @constant
             */
            type: "jellyfin";
        };
        /** InviteJellyfinPermissions */
        InviteJellyfinPermissions: {
            /** @description Indicates if the user is an administrator. */
            IsAdministrator?: boolean | null;
            /** @description Indicates if the user is hidden. */
            IsHidden?: boolean | null;
            /** @description Allows the user to manage collections. */
            EnableCollectionManagement?: boolean | null;
            /** @description Allows the user to manage subtitles. */
            EnableSubtitleManagement?: boolean | null;
            /** @description Allows the user to manage lyrics. */
            EnableLyricManagement?: boolean | null;
            /** @description Indicates if the user is disabled. */
            IsDisabled?: boolean | null;
            /** @description The maximum parental rating allowed for the user. */
            MaxParentalRating?: number | null;
            /** @description A list of tags blocked for the user. */
            BlockedTags?: string[] | null;
            /** @description A list of tags allowed for the user. */
            AllowedTags?: string[] | null;
            /** @description Allows the user to access preference settings. */
            EnableUserPreferenceAccess?: boolean | null;
            /** @description A list of unrated items blocked for the user. */
            BlockUnratedItems?: string[] | null;
            /** @description Allows the user to remotely control other users. */
            EnableRemoteControlOfOtherUsers?: boolean | null;
            /** @description Allows the user to control shared devices. */
            EnableSharedDeviceControl?: boolean | null;
            /** @description Allows the user to access remotely. */
            EnableRemoteAccess?: boolean | null;
            /** @description Allows the user to manage live TV settings. */
            EnableLiveTvManagement?: boolean | null;
            /** @description Allows the user to access live TV. */
            EnableLiveTvAccess?: boolean | null;
            /** @description Allows the user to play media. */
            EnableMediaPlayback?: boolean | null;
            /** @description Allows audio playback with transcoding. */
            EnableAudioPlaybackTranscoding?: boolean | null;
            /** @description Allows video playback with transcoding. */
            EnableVideoPlaybackTranscoding?: boolean | null;
            /** @description Allows remuxing during playback. */
            EnablePlaybackRemuxing?: boolean | null;
            /** @description Forces transcoding for remote sources. */
            ForceRemoteSourceTranscoding?: boolean | null;
            /** @description Allows the user to delete content. */
            EnableContentDeletion?: boolean | null;
            /** @description A list of folders from which content deletion is allowed. */
            EnableContentDeletionFromFolders?: string[] | null;
            /** @description Allows the user to download content. */
            EnableContentDownloading?: boolean | null;
            /** @description Allows transcoding during sync. */
            EnableSyncTranscoding?: boolean | null;
            /** @description Allows the user to convert media. */
            EnableMediaConversion?: boolean | null;
            /** @description A list of devices enabled for the user. */
            EnabledDevices?: string[] | null;
            /** @description Allows the user to access all devices. */
            EnableAllDevices?: boolean | null;
            /** @description A list of channels enabled for the user. */
            EnabledChannels?: string[] | null;
            /** @description Allows the user to access all channels. */
            EnableAllChannels?: boolean | null;
            /** @description The number of invalid login attempts by the user. */
            InvalidLoginAttemptCount?: number | null;
            /** @description The number of login attempts allowed before lockout. */
            LoginAttemptsBeforeLockout?: number | null;
            /** @description Allows the user to share content publicly. */
            EnablePublicSharing?: boolean | null;
            /** @description A list of media folders blocked for the user. */
            BlockedMediaFolders?: string[] | null;
            /** @description A list of channels blocked for the user. */
            BlockedChannels?: string[] | null;
            /** @description The bitrate limit for remote clients. */
            RemoteClientBitrateLimit?: number | null;
            /** @description The user's level of access to SyncPlay. */
            SyncPlayAccess?: string | null;
        };
        /** InviteModel */
        InviteModel: {
            /** @default [] */
            jellyfin: components["schemas"]["InviteJellyfinModel"][];
            /** @default [] */
            plex: components["schemas"]["InvitePlexModel"][];
            /** @default [] */
            emby: components["schemas"]["InviteEmbyModel"][];
            /**
             * @description Any special permissions said user should be given
             * @default []
             */
            roles: string[];
            /**
             * @description How many times can a invite code be redeemed
             * @default 1
             */
            uses: number;
            /** @description Optional datetime to stop accepting code */
            expires?: string | null;
            /** @default [] */
            onboarding: components["schemas"]["OnboardTemplateOrderModel"][];
            /** @description ID of the invitation code */
            id: string;
            /** @description Invitation password hashed */
            password: string;
            /** @description User ID who created the invite */
            user_id: string;
        };
        /** InvitePlexModel */
        InvitePlexModel: {
            /** @description Inviterr's internal ID of the server */
            platform_internal_id: string;
            /** @description A list of folders enabled for the user, if None all folders will be provided. */
            folders?: string[] | null;
            /**
             * @description Max allow sessions for user, if 0 is unlimited. For Plex this must be implemented with an external system.
             * @default 0
             */
            sessions: number;
            permissions: components["schemas"]["InvitePlexPermissions"];
            /**
             * @default plex
             * @constant
             */
            type: "plex";
        };
        /** InvitePlexPermissions */
        InvitePlexPermissions: {
            /** @description Set True to allow user to sync content. */
            allowSync?: boolean | null;
            /** @description Set True to allow user to upload photos. */
            allowCameraUpload?: boolean | null;
            /** @description Set True to allow user to utilize installed channels. */
            allowChannels?: boolean | null;
            /** @description Dict containing key 'contentRating' and/or 'label' each set to a list of values to be filtered. ex: `{'contentRating':['G'], 'label':['foo']}` */
            filterMovies?: Record<string, never> | null;
            /** @description Dict containing key 'contentRating' and/or 'label' each set to a list of values to be filtered. ex: `{'contentRating':['G'], 'label':['foo']}` */
            filterTelevision?: Record<string, never> | null;
            /** @description Dict containing key 'label' set to a list of values to be filtered. ex: `{'label':['foo']}` */
            filterMusic?: Record<string, never> | null;
        };
        /** JellyfinEmbyAuth */
        JellyfinEmbyAuth: {
            username: string;
            password: string;
        };
        /** OnboardTemplateOrderModel */
        OnboardTemplateOrderModel: {
            /** @description What step order should this template be displayed in, if -1 will only be viewable in user guides */
            order: number;
            /**
             * @description Hide this documentation after onboarding
             * @default false
             */
            hide_after_onboard: boolean;
            /** @description The internal ID for said template */
            template_id: string;
            /**
             * @description Only show template if invite includes following platforms or requests
             * @default [
             *       "plex",
             *       "jellyfin",
             *       "emby"
             *     ]
             */
            only_for: ("plex" | "jellyfin" | "emby")[];
        };
        /** RedeemInviteModel */
        RedeemInviteModel: {
            /** @description Raw invite code */
            code: string;
            jellyfin_emby_auth?: components["schemas"]["JellyfinEmbyAuth"] | null;
            plex_token?: string | null;
        };
        /** SessionModel */
        SessionModel: {
            /** Format: date-time */
            expires: string;
            /** Format: date-time */
            created: string;
            device?: string | null;
            user_id: string;
            id: string;
        };
        /** UserModel */
        UserModel: {
            /** @description ID of user */
            id: string;
            /**
             * @description Defines what special permissions the user has
             * @default []
             */
            roles: string[];
            /** @description Internal platform IDs user can access */
            internal_platform_ids: string[];
            username: string;
            /** @description Hashed password if plexOauth isn't being used. */
            password?: string | null;
            /** @enum {string} */
            auth_type: "usernamePassword" | "plexOauth";
            /** @default Unknown */
            country: string;
            /** @description ID of invitation redeemed for access */
            invite_id?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ApiControllersV1InviteRedeemRedeem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RedeemInviteModel"];
            };
        };
        responses: {
            /** @description Document created, URL follows */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1InviteIdFind: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id_: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request fulfilled, document follows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteModel"];
                };
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1InviteIdModify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id_: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInviteModel"];
            };
        };
        responses: {
            /** @description Request fulfilled, document follows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1InviteIdDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id_: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request fulfilled, nothing follows */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1InviteIdPasswordResetReset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id_: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request fulfilled, document follows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1InviteCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInviteModel"];
            };
        };
        responses: {
            /** @description Document created, URL follows */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatedInviteModel"];
                };
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1InvitePageIntList: {
        parameters: {
            query?: {
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request fulfilled, document follows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteModel"][];
                };
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1SetupPublic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request fulfilled, document follows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BasicSetupCompletedModel"];
                };
            };
        };
    };
    ApiControllersV1SetupSetup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BasicSetupCreateModel"];
            };
        };
        responses: {
            /** @description Document created, URL follows */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1SessionsSessionIdInvalidateSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request fulfilled, nothing follows */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status_code: number;
                        detail: string;
                        extra?: null | {
                            [key: string]: unknown;
                        } | unknown[];
                    };
                };
            };
        };
    };
    ApiControllersV1SessionsSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request fulfilled, document follows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionModel"][];
                };
            };
        };
    };
}
